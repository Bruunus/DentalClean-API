*** Projeto DentalClean ***

Esta documentação do projeto serve para dar explicação e apresentação do projeto em seus detalhes, funções,
tecnologias e, aprensentar os seus detalhes e objetivos.


O projeto DentalClean trata-se de uma API backend utilizando a linguagem Java para ser consumida por uma 
tecnologia frontend em suas requisições. O projeto foi interamente criado com o framework spring boot na 
versão 2.1.5RELEASE sendo por ele todas as funcionalidade gerenciada. O spring boot framework segue em 
conjunto com maven na versão SNAPSHOT 0.0.1 para gerenciamento dos pacotes jars necessários para o projeto,
a versão do maven vem em compatibilidade com a versão do spring boot declara. O projeto utiliza-se na versão
do Java 1.8 como compilador, o framework também como recursos web para requisições e ferramentas de 
gerenciamento web como spring boot starter web, ferramente spring boot devtools para update do projeto sem a 
necessidade de startar o mesmo após uma nova modificação.

Para gerenciamento de banco de dados da aplicação selecionamos o MariaDB Java Client em conjunto com os
recursos do Spring Data para realizar a persistência nas bases de dados para cada requisição.


*** Funcionalidade e Recursos para este Projeto ***

O DentalClean segue um sistema para clínica odontológica para básica contendo as funcionalidade primárias
necessárias de uma aplicação odontológica. Contendo as funções de uma CRUD o DentalClean possui recusos para
criar ficha de pacientes, cadastro de dentistas, cadastro de usuários, atualizações da mesmas, exclusão das 
mesmas e exibição dos resgistros básicos, tudo isso como funcionalidades primárias aguardando para 
aprimoramento futuro.



*** Parte Técnica ***

No projeto foi tomado todo o cuidado no tratamento adequado dos dados recebidos das requisições e tratados 
de forma adequada. Criamos as classes DTO acompanhando as entidades da camada de dados para as requisiçoes
de criação de ficha de pacientes, de dentistas e de usuários da aplicação. Elas irão realizar de forma 
autência aos dados necessários de acordo com a necessidade do processo de negócios. 

A camada service fica responsável pela comunicação com a camada de módulo seguindo as boas práticas MVC. 
Todas as comunicações com a camada de módulo fica responsável com a camada de serviço.

A camada de repositório fica responsável pela persistência dos dados com as tabelas do banco de dados e,
a camada de controle fica responsável pelo recebimento das requisições solicitadas pelo clente.



*** Teste da Aplicação ***

Para camada de testes é utilizado o JUnit test do framework spring boot starter test. Serão testados
a camada de controle para certificar a boa funcionalidade no tratamento das requisições e a camada de 
repositório para testes de persistência com o banco de dados.

Para tratamento com a camada de controle será utilizado os recursos da classe MockMvc para testes se
utilizando de URLs criadas simulando uma requisição em tempo real de requisição cliente-servidor. E, 
para camada de persistência realizamos a criação de um segundo arquivo de configuração application-test.
properties e subimos os testes de persistência com um banco de dados apenas para teste configurado dentro
de um profile de teste. Tudo isso anotado devidamente nas classes de teste de repositórios.



Criador: Bruno Fernandes dos Santos 
Data do documento: 22/07/2023


 
 
 
 
 
 
 